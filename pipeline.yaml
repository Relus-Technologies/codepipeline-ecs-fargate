AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for building a simple docker pipeline to ECS'
Parameters:
  ApplicationName:
    AllowedPattern: ^[a-z]([a-z0-9-])+$
    ConstraintDescription: Application name must be between 2 and 15 characters, begin with a letter, and only contain lowercase letters, numbers, and hyphens (-).
    Description: Name of the application.
    MaxLength: 15
    MinLength: 2
    Type: String
  ContainerPort:
    Type: String
    Default: 80
  Cpu:
    Type: String
    Default: 256
  Memory:
    Type: String
    Default: 512
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Ref 'ApplicationName'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'ApplicationName'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Name
          Value: !Ref 'ApplicationName'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Name
          Value: !Ref 'ApplicationName'
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'c']]
      CidrBlock: 10.0.0.64/26
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Name
          Value: !Ref 'ApplicationName'
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'RouteTable'
      SubnetId: !Ref 'Subnet1'
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'RouteTable'
      SubnetId: !Ref 'Subnet2'
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref 'Vpc'
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'ApplicationName'
      SecurityGroups:
        - !Ref 'SecurityGroup'
      Subnets:
        - !Ref 'Subnet1'
        - !Ref 'Subnet2'
  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Ref 'ApplicationName'
        Port: 80
        Protocol: HTTP
        Tags:
          - Key: Name
            Value: !Ref 'ApplicationName'
        TargetType: ip
        VpcId: !Ref 'Vpc'
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref 'ApplicationName']]
      RetentionInDays: 14
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Join ['-', [!Ref 'ApplicationName', ecs, service]]
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: !Sub
                  - 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Image}'
                  - { Image: !Ref 'ApplicationName' }
              - Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
      RoleName: !Join ['-', [!Ref 'ApplicationName', ecs, task]]
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref 'Cpu'
      ExecutionRoleArn: !GetAtt 'EcsTaskRole.Arn'
      Family: !Ref 'ApplicationName'
      Memory: !Ref 'Memory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref 'ApplicationName'
          Essential: true
          Image: reluscloud/docker-demo
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Essential: true
      TaskRoleArn: !GetAtt 'EcsTaskRole.Arn'
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      TaskDefinition: !Ref 'EcsTaskDefinition'
      DesiredCount: 1
      LoadBalancers:
      - TargetGroupArn: !Ref 'TargetGroup'
        ContainerPort: !Ref 'ContainerPort'
        ContainerName: !Ref 'ApplicationName'
      Cluster: !Ref 'EcsCluster'
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'SecurityGroup'
          Subnets:
            - !Ref 'Subnet1'
            - !Ref 'Subnet2'
  EcrRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref 'ApplicationName'
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Fargate
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Join ['', [!Ref 'ApplicationName', ' project repository']]
      RepositoryName: !Ref 'ApplicationName'
  BuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ['-', [!Ref 'ApplicationName', codebuild]]
          PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']]
                  - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket',/*]]
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
              - Action:
                  - codepipeline:GetPipelineState
                Effect: Allow
                Resource: '*'
              - Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: '*'
              - Action:
                  - ecr:*
                Effect: Allow
                Resource: !Sub
                  - 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repo}'
                  - Repo: !Ref EcrRepository
      RoleName: !Join ['-', [!Ref 'ApplicationName', codebuild]]
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name:
        Fn::Join: [ '-', [ !Ref 'ApplicationName', build ] ]
      ServiceRole: !GetAtt 'BuildServiceRole.Arn'
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: APP_NAME
            Value: !Ref 'ApplicationName'
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          - Name: IMAGE_REPO_NAME
            Value: !Ref 'EcrRepository'
          - Name: IMAGE_TAG
            Value: latest
        PrivilegedMode: true
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region', !Ref 'AWS::AccountId', pipeline]]
      VersioningConfiguration:
        Status: Enabled
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']]
                  - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket',/*]]
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                Effect: Allow
                Resource:
                  - !GetAtt 'CodeCommitRepo.Arn'
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                Effect: Allow
                Resource:
                  - !GetAtt 'BuildProject.Arn'
              - Action:
                  - cloudformation:*
                Effect: Allow
                Resource:
                  - !Sub ['arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}-deploy/*', {AppName: !Ref 'ApplicationName'}]
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource:
                  - !GetAtt 'EcsTaskRole.Arn'
              - Action:
                  - ecs:*
                Effect: Allow
                Resource:
                  - '*'
          PolicyName: !Join ['-', [!Ref 'ApplicationName', pipeline]]
      RoleName: !Join ['-', [!Ref 'ApplicationName', pipeline]]
  ProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'S3Bucket'
        Type: S3
      Name: !Join ['-', [!Ref 'ApplicationName', pipeline]]
      RoleArn: !GetAtt 'PipelineRole.Arn'
      Stages:
        - Name: Source
          Actions:
          - Name: SourceFetch
            ActionTypeId:
              Category: Source
              Owner: AWS
              Provider: CodeCommit
              Version: 1
            Configuration:
              BranchName: master
              PollForSourceChanges: false
              RepositoryName: !Ref 'ApplicationName'
            InputArtifacts: []
            OutputArtifacts:
              - Name: !Join ['-', [!Ref 'ApplicationName', source]]
            RunOrder: 1
        - Name: Build
          Actions:
          - Name: BuildDocker
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: 1
            Configuration:
              ProjectName: !Ref 'BuildProject'
            InputArtifacts:
              - Name: !Join ['-', [!Ref 'ApplicationName', source]]
            OutputArtifacts:
              - Name: !Join ['-', [!Ref 'ApplicationName', cfntemplate]]
            RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: DeployEcs
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: ECS
              Version: 1
            Configuration:
              ClusterName: !Ref EcsCluster
              ServiceName: !GetAtt 'EcsService.Name'
              FileName: images.json
            InputArtifacts:
              - Name: !Join ['-', [!Ref 'ApplicationName', cfntemplate]]
            RunOrder: 1
  SourceEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Sid: 1
      Policies:
        - PolicyName: CodePipelineCloudWatchEventPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - codepipeline:StartPipelineExecution
                Effect: Allow
                Resource:
                  - !Sub
                    - 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}'
                    - Pipeline: !Ref 'ProjectPipeline'
      RoleName: !Join ['-', [!Ref 'ApplicationName', cloudwatchevent]]
  SourceEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Detects changes to the source repository and triggers pipeline execution
      EventPattern:
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceName: [master]
          referenceType: [branch]
        detail-type: [CodeCommit Repository State Change]
        resources: [!GetAtt 'CodeCommitRepo.Arn']
        source: [aws.codecommit]
      Name: !Join ['-', [!Ref 'ApplicationName', SourceEvent]]
      State: ENABLED
      Targets:
        - Id: ProjectPipelineTarget
          Arn: !Sub ['arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}', { Pipeline: !Ref 'ProjectPipeline' } ]
          RoleArn: !GetAtt 'SourceEventRole.Arn'
Outputs:
  CloneUrlHttp:
    Description: The endpoint used to push to the code repo over HTTP
    Value: !GetAtt [ CodeCommitRepo, 'CloneUrlHttp' ]
  CloneUrlSsh:
    Description: The endpoint used to push to the code repo over SSH
    Value: !GetAtt [ CodeCommitRepo, 'CloneUrlSsh' ]
  EcsServiceLink:
    Description: The console link the ECS service for this application
    Value: !Sub ['https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/Fargate/services/${App}/details', { App: !Ref ApplicationName } ]
  EndpointUrl:
    Description: The HTTP endpoint to call the service
    Value: !Sub [ 'http://${DNSName}', { DNSName: !GetAtt [ LoadBalancer, 'DNSName' ] } ]
  PipelineLink:
    Description: The console link to the codepipeline for this application
    Value: !Sub ['https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${App}-pipeline', { App: !Ref ApplicationName } ]
  BuildLink:
    Description: The console link to the codebuild project associated with this application
    Value: !Sub ['https://console.aws.amazon.com/codebuild/home?region=${AWS::Region}#/projects/${App}-build/view', { App: !Ref ApplicationName } ]
  RepositoryLink:
    Description: The console link to the codecommit repository associated with this application
    Value: !Sub ['https://console.aws.amazon.com/codecommit/home?region=${AWS::Region}#/repository/${App}/browser/HEAD/--/', { App: !Ref ApplicationName } ]

